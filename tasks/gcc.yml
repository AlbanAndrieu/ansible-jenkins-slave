---
# TODO Solaris 10
# Check gcc
# /usr/sfw/bin/gcc -v

- name: cpp | Set cpp link to gcc
  set_fact: cpp_dir=/usr/bin/

- name: cpp | Remove {{ cpp_dir }}/cpp
  file: path={{ cpp_dir }}/cpp state=absent
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ("12.04", "14.04")

- name: cpp | Install C++ compiler (Debian based)
  apt:
    pkg: ['gcc-4.6', 'g++-4.6']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ("12.04")

- name: cpp | Install C++ compiler (Debian based)
  apt:
    pkg: ['gcc-4.8', 'g++-4.8']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ("12.04")

- name: cpp | Install C++ compiler (Debian based)
  apt:
    pkg: ['gcc-5', 'g++-5']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ("12.04", "14.04")

- name: cpp | Install C++ compiler (Debian based)
  apt:
    name: ['gcc-6', 'g++-6']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ("12.04", "14.04", "16.04")

# SEE https://www.vultr.com/docs/how-to-install-gcc-on-centos-6
- name: cpp | Install C++ compiler (CentOS based)
  yum:
    name: ['gcc', 'gcc-c++']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  become: true
  when: (ansible_distribution == 'CentOS')
  # On purpose, we do not install gcc for RedHat because MiCloud VM already havea default one installed
  # or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat'
# TODO add all required versions
#   - compat-libstdc++-33
#   - glibc-devel.i386
#   - glibc-devel

- name: cpp | Install C++ compiler (RedHat based)
  yum:
    name: ['gcc-c++']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  become: true
  when: (ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
# On purpose, we do not install gcc for RedHat because MiCloud VM already havea default one installed
#   - gcc
# Only install c++
#   - gcc-c++

- debug: msg="Version {{ ansible_distribution }} {{ ansible_distribution_version }} {{ ansible_architecture }}"

- name: cpp | Set cpp link to gcc version
  set_fact: cpp_version=4.6
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ("12.04")

- name: cpp | Set cpp link to gcc version 4.8
  set_fact: cpp_version=4.8
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ("14.04")

- name: cpp | Set cpp link to gcc version 5
  set_fact: cpp_version=5
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ("16.04", "18.04")

- name: cpp | Set cpp link to gcc version 6
  set_fact: cpp_version=6
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ("12.04", "14.04", "16.04")

# - name: cpp | Set cpp link to gcc version
#   set_fact: cpp_version=4.4.7
#   when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: cpp | Set cpp link to gcc version
  set_fact: cpp_version=4.8
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')

# https://developers.redhat.com/blog/2018/07/07/yum-install-gcc7-clang/

- name: jenkins-slave | Install clang scan-build (CentOS and RedHat based)
  yum:
    pkg: ['clang', 'clang-analyzer']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  become: true

- name: jenkins-slave | Install clang-format (CentOS and RedHat based)
  yum:
    name: ['llvm-toolset-7-git-clang-format']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  become: true
  ignore_errors: true

# scl enable devtoolset-7 llvm-toolset-7 bash

- name: cpp | Install C++ clang
  apt:
    pkg: ['clang-format', 'clang-tools', 'clang-tidy']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: cpp
  become: true
  ignore_errors: true

- name: cpp | Install C++ clang llvm dev
  yum:
    pkg: ['libclang-dev', 'llvm', 'llvm-3.8-dev']
    state: "{{ util_pkg_state | default('present') }}"
    update_cache: true
# - clang-devel
  tags: cpp
  when: not ((ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '6')
  become: true
  ignore_errors: true

- name: cpp | Install C++ quality tool
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=true"
  with_items:
    - colormake
    - valgrind
    - gawk
    - kcachegrind
    - valkyrie
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: cpp
  become: true
  ignore_errors: true

- name: cpp | Install C++ quality tool
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=true"
  with_items:
    - findbugs
    - flawfinder
    - ggcov
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: cpp
  become: true
  ignore_errors: true

- name: cpp | Install C++ quality tool
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=true"
  with_items:
    - cppcheck
    - gperf
    - lcov
  tags: cpp
  become: true
  ignore_errors: true

- name: cpp | Install C++ quality tool rats
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=true"
  with_items:
    - rats
  tags: cpp
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['16.04']
  become: true
  ignore_errors: true

# - name: cpp | Install dragonegg for gcc
#   action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=true"
#   with_items:
#    - dragonegg
#   tags: cpp
#   when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
#   become: true
#   ignore_errors: true

- name: cpp | Display cpp link before
  action: command update-alternatives --display cpp
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  changed_when: false
  become: true
  ignore_errors: true

# sudo update-alternatives --remove-all gcc
# sudo update-alternatives --remove-all cpp
# sudo update-alternatives --remove-all g++

# TODO : Waiting ansible 2.2 to manage priority https://docs.ansible.com/ansible/alternatives_module.html
- name: cpp | Configure cpp alternatives
  alternatives: name={{ item.name }} link={{ item.link }} path={{ item.path }} priority={{ item.priority }}
  with_items:
    - { name: gcc, link: /usr/bin/gcc, path: "{{ cpp_dir }}gcc-{{ cpp_version }}", priority: 5 }
    - { name: cpp, link: /usr/bin/cpp, path: "{{ cpp_dir }}cpp-{{ cpp_version }}", priority: 5 }
    - { name: g++, link: /usr/bin/g++, path: "{{ cpp_dir }}g++-{{ cpp_version }}", priority: 5 }
  when: not( (cpp_dir is undefined) or (cpp_dir is none) )
        and (cpp_dir | length > 0)
        and not( (cpp_version is undefined) or (cpp_version is none) )
        and (cpp_version | length > 0)
  become: true
  ignore_errors: true

# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60
# sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-6 60
# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 60

# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50
# sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-5 50
# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50

# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 40
# sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.9 40
# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 40

# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 30
# sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.8 30
# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 30

# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 20
# sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.7 20
# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.7 20

# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 10
# sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.6 10
# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 10

# sudo update-alternatives --config gcc
# sudo update-alternatives --config cpp
# sudo update-alternatives --config g++

# ls -la /etc/alternatives/gcc*

- name: cpp | Display cpp link after
  action: command update-alternatives --display cpp
  when: not( (cpp_dir is undefined) or (cpp_dir is none) )
        and (cpp_dir | length > 0)
        and not( (cpp_version is undefined) or (cpp_version is none) )
        and (cpp_version | length > 0)
        and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  changed_when: false
  become: true
