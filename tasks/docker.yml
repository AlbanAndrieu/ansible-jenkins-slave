
- name: docker | Set python link to python version
  set_fact: python_version=3.6
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ("16.04")

##TODO fix docker-compose
#sudo pip2.7 uninstall docker
#sudo pip2.7 uninstall docker-py
#sudo pip2.7 uninstall docker-compose
#sudo pip2.7 install docker-compose==1.12.0

#sudo pip3.6 uninstall docker
#sudo pip3.6 uninstall docker-py
#sudo pip3.6 uninstall docker-compose
#sudo pip3.6 install docker-compose==1.12.0

- name: docker | docker-compose check #1
  shell: "docker-compose --version"
  register: docker_compose_result
  ignore_errors: true
  become: yes

- debug: msg="{{ docker_compose_result.rc }} - {{ docker_compose_result.stdout }}"
  ignore_errors: true

- name: docker | Uninstall docker-py
  pip: name={{ item }} state=absent
  executable: pip{{ python_version }}
  when: docker_compose_result.rc != 0
  with_items:
    - docker
    - docker-py
    - docker-compose
  become: yes

- name: docker | Install Docker/Ansible compatible compose tools
  pip: name={{ item }}
  executable: pip{{ python_version }}
  when: ((ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_version.full | version_compare('2.3', '>='))) or (ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  with_items:
    - docker-compose==1.12.0
  become: yes

- name: docker | docker-compose check #2
  shell: "docker-compose --version"
  register: docker_compose_result
  ignore_errors: True
  become: yes

- name: docker | Fail the play if the previous command did not succeed
  fail: msg="The command docker-compose --version failed"
  when: "'FAILED' in docker_compose_result.stderr"

#- name: docker | Install Docker/Ansible compatible tools (Debian based)
#  pip: name={{ item }}
#  executable: pip{{ python_version }}
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_version.full | version_compare('2.3', '>='))
#  with_items:
#    - docker==2.2.1
#    - docker==2.7.0
#  become: yes

#- name: docker | Install Docker/Ansible compatible tools (Debian based)
#  pip: name={{ item }}
#  executable: pip{{ python_version }}
#  when: (ansible_version.full | version_compare('2.3', '>='))
#  with_items:
#    - docker-py==1.10.6
#  become: yes

- name: docker | Create a docker group
  group:
      name=docker
      state=present
  become: yes

- name: docker | Add user(s) to docker group
  user:
      name={{ item }}
      group=docker
      state=present
  with_items: docker_users
  when: docker_users is defined
  become: yes

#sudo gpasswd -a ${USER} docker
#sudo gpasswd -a jenkins docker

#See https://github.com/tensorflow/tensorflow/issues/4078
#For https://github.com/NVIDIA/nvidia-docker
#- name: docker | Install requirement for nvidia
#  action: "{{ ansible_pkg_mgr }} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  with_items:
#    - nvidia-361-dev
#  become: yes
#  changed_when: false

#nvidia-smi

#grubby --args="user_namespace.enable=1" --update-kernel="$(grubby --default-kernel)"
- name: docker | Enable "user" namespace
  shell: "grubby --args=\"user_namespace.enable=1\" --update-kernel=\"$(grubby --default-kernel)\""
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
  become: yes  
  ignore_errors: true
 
#TO REVOKE
# grubby --remove-args="user_namespace.enable=1" --update-kernel="$(grubby --default-kernel)" 
 
#Check docker
- name: docker | Install check docker
  shell: "curl https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh > check-config.sh"
  register: cpan_result
  changed_when: false
  become: yes
  
- name: docker | Run check docker
  shell: bash ./check-config.sh
  when: cpan_result.changed
  become: yes  
  ignore_errors: true
