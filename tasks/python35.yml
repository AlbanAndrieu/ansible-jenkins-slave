
#TODO on RedHat add python3.5 by hand

#TODO RedHat https://www.tecmint.com/install-python-in-linux/ install python 3.5 for ansible
#yum -y groupinstall development
#yum -y install zlib-devel

# wget https://www.python.org/ftp/python/3.5.5/Python-3.5.5.tgz
# tar xzf Python-3.5.5.tgz
# cd Python-3.5.5
# ./configure --enable-optimizations
# make altinstall
# cd ..
# rm -f Python-3.5.5.tgz

#On RedHat
#sudo yum install -y https://centos6.iuscommunity.org/ius-release.rpm
#sudo yum install -y python35u python35u-pip

#sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm
#sudo yum install -y python35u python35u-pip

- name: jenkins-slave | Install python (RedHat based)
  yum:
    name: "{{ item }}"
    state: "{{ jenkins_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '6')
  with_items:
   - "https://centos6.iuscommunity.org/ius-release.rpm"
   - python35u
   - python35u-pip
  become: yes

- name: jenkins-slave | Install python (RedHat based)
  yum:
    name: "{{ item }}"
    state: "{{ jenkins_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
  with_items:
   - "https://centos7.iuscommunity.org/ius-release.rpm"
   - python35u
   - python35u-pip
  become: yes

- name: python3 | Set python link to python version
  set_fact: python3_version=3.5

# sudo apt-get install python3-pip --reinstall
- name: python3 | Install missing pip3.5
  shell: "curl https://bootstrap.pypa.io/ez_setup.py -o - | sudo python3.5 && easy_install pip"
  register: curl_result
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  changed_when: false
  become: yes
  
#sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev

#sudo apt-cache show python3
#sudo apt-get install python3=3.5.1*

- name: python3 | Install python 3 requirement
  action: "{{ ansible_pkg_mgr}} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  with_items:
    - python3=3.5.1*

#- name: python3 | Run pip check
#  shell: (pip -V && pip3.5 -V) | uniq
#  become: yes
#  ignore_errors: true

#MySQL-python is not supported on python3 instead of this you can use mysqlclient
- name: python3 | Install MySQL for sonar
  pip:
    name: "{{ item }}"
    executable: "pip{{ python3_version }}"
  with_items:
    #- MySQL-python
    - mysqlclient
  become: yes
  ignore_errors: true    

- name: python3 | Install python-owasp-zap-v2.4 via pip
  pip:
    name: python-owasp-zap-v2.4
    executable: pip{{ python3_version }}
  become: yes
  ignore_errors: true    
  
- name: python3 | Gather current pip requirement
  shell: "pip{{ python3_version }} freeze > requirements-{{ python3_version }}.txt"
  when: not( (python3_version is undefined) or (python3_version is none) or (python3_version | trim == '') )
  changed_when: false
  become: yes
  ignore_errors: true
  
- name: python3 | Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip{{ python3_version }}

- name: python3 | Copy the minimal requirements configuration file for python
  copy: src=requirements-{{ python3_version }}.txt dest={{ ansible_user_dir }}/requirements-minimal-{{ python3_version }}.txt backup=yes
  become: true

- name: python3 | Copy the requirements configuration file for python
  copy: src=requirements-{{ python3_version }}.txt dest={{ ansible_user_dir }}/requirements-{{ python3_version }}.txt backup=yes
  become: true

- name: python3 | Install apt dependencies for python 3 requirements
  action: "{{ ansible_pkg_mgr}} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libcups2-dev
    - python3-apt

- name: python3 | Uninstall apt dependencies for python 3 requirements
  pip:
    name: "{{ item }}"
    executable: "pip{{ python_version }}"
    state: absent
  when: not ansible_check_mode and docker_compose_result.rc != 0
  with_items:
    - libxml2-python
  ignore_errors: '{{ ansible_check_mode }}'
  become: yes

- name: python3 | Create venv and install requirements
  pip:
    requirements: "{{ ansible_user_dir }}/requirements-minimal-{{ python3_version }}.txt"
    virtualenv: /opt/ansible/env35
    virtualenv_python: "python{{ python3_version }}"
  tags:
    - venv
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_user_dir }}/.local/bin"
  ignore_errors: true
  
#- name: python3 | Install missing pip requirement
#  shell: "pip{{ python3_version }} install -r requirements-current-{{ python3_version }}.txt"
#  changed_when: false
#  become: yes
#  ignore_errors: true
