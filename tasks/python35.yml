---

# TODO on RedHat add python3.5 by hand

# See there is 3 ways to install pyton
# https://www.2daygeek.com/3-methods-to-install-latest-python3-package-on-centos-6-system/#

# We use Method-3 : Using IUS Community Repository
# This wasy is also working with https://github.com/Stouts/Stouts.python role

# TODO RedHat https://www.tecmint.com/install-python-in-linux/ install python 3.5 for ansible
# yum -y groupinstall development
# yum -y install zlib-devel

# wget https://www.python.org/ftp/python/3.5.5/Python-3.5.5.tgz
# tar xzf Python-3.5.5.tgz
# cd Python-3.5.5
# ./configure --enable-optimizations
# make altinstall
# cd ..
# rm -f Python-3.5.5.tgz

# On RedHat 6
# sudo yum install -y https://centos6.iuscommunity.org/ius-release.rpm
# sudo yum install -y python35u python35u-pip

# On CentOS 7
# sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm
# sudo yum install -y python35u python35u-pip
# Other way below
# See https://www.softwarecollections.org/en/scls/rhscl/rh-python35/
#  1. Install a package with repository for your system:
#  On CentOS, install package centos-release-scl available in CentOS repository:
# $ sudo yum install centos-release-scl
#  On RHEL, enable RHSCL repository for you system:
# $ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms
#  2. Install the collection:
# $ sudo yum install rh-python35
#  3. Start using software collections:
# $ scl --list
# $ scl enable rh-python35 bash

- name: jenkins-slave | Install python (RedHat and CentOS based)
  yum:
    name: "{{ item }}"
    state: "{{ util_pkg_state | default('present') }}"
  when: ((ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '6')
  with_items:
    #- "https://centos6.iuscommunity.org/ius-release.rpm"
    - "https://repo.ius.io/ius-release-el6.rpm"
    - python35u
    - python35u-devel
    - python35u-pip
  become: true

- name: jenkins-slave | Install python (RedHat and CentOS based)
  yum:
    name: "{{ item }}"
    state: "{{ util_pkg_state | default('present') }}"
  when: ((ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '7')
  with_items:
    #- "https://centos7.iuscommunity.org/ius-release.rpm"
    - "https://repo.ius.io/ius-release-el7.rpm"
    - python35u
    - python35u-devel
    - python35u-pip
  become: true

- name: python35 | Set python link to python version
  set_fact: python3_version=3.5

# sudo apt-get install python3-pip --reinstall

# sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev

- name: python3 | Install python 3.5 ppa
  apt_repository: repo="ppa:deadsnakes/ppa" state={{ util_repository_state|default('present') }}
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['19.04'])
  #environment:
  #  http_proxy: "{{ http_proxy }}"
  #  https_proxy: "{{ https_proxy }}"
  become: true
  ignore_errors: true

# sudo apt-cache show python3
# sudo apt-get install python3=3.5.1*

- name: python35 | Install python 3.5 requirements
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=yes"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['16.04'])
  with_items:
    - python3=3.5.1*
    - python3-dbg=3.5.1*
    - python3-pip

- name: python35 | Install python 3.5 requirements
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=yes"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['16.04'])
  with_items:
    - python3-dev=3.5.1*

- name: python35 | Install python 3.5 requirements
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=yes"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '16.04'])
  with_items:
    - python3.5
    - python3.5-dev
#    - python3.5-dbg
#    - python3.5-gdbm
#    - python3-pip

- name: python35 | Install missing pip{{ python3_version }} (1)
  get_url:
    url: https://bootstrap.pypa.io/get-pip.py
    dest: /tmp/get-pip.py
    force: yes
  register: curl_result
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  #environment:
  #  http_proxy: "{{ http_proxy }}"
  #  https_proxy: "{{ https_proxy }}"
  become: true

- name: python35 | Install missing pip{{ python3_version }} (2) # noqa 503
  command: "python{{ python3_version }} /tmp/get-pip.py"
  when: curl_result.changed and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  changed_when: false
  become: true

- debug: msg="curl_result - {{ curl_result.rc }} - {{ curl_result.stdout }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and not ansible_check_mode
  ignore_errors: true

# - name: python35 | Install missing pip{{ python3_version }} (2)
#   shell: "curl https://bootstrap.pypa.io/ez_setup.py -o - | python{{ python3_version }} && easy_install pip"
#   register: curl_result
#   when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
#   changed_when: false
#   become: true
#
# - debug: msg="curl_result - {{ curl_result.rc }} - {{ curl_result.stdout }}"
#   when: not ansible_check_mode
#   ignore_errors: true

# - name: python35 | Run pip check # noqa 503
#   shell: (pip -V && pip3.5 -V) | uniq
#   become: true
#   ignore_errors: true

- name: python | Install which pip{{ python3_version }}
  command: "which pip{{ python3_version }}"
  register: pip_result
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  changed_when: false
  become: true

- debug: msg="pip_result - {{ pip_result.rc }} - {{ pip_result.stdout }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and not ansible_check_mode
  ignore_errors: true

- name: python35 | Upgrade setuptools
  command: "pip{{ python3_version }} install --upgrade setuptools"
  changed_when: false
  become: true
  ignore_errors: true

# MySQL-python is not supported on python3 instead of this you can use mysqlclient
- name: python35 | Install MySQL for sonar
  pip:
    name: "{{ item }}"
    executable: "pip{{ python3_version }}"
  with_items:
# - MySQL-python
    - mysqlclient
  become: true
  ignore_errors: true

- name: python35 | Gather current pip requirement
  command: "pip{{ python3_version }} freeze > requirements-{{ python3_version }}.txt"
  when: not( (python3_version is undefined) or (python3_version is none) )
        and (python3_version | length > 0)
  changed_when: false
  become: true
  ignore_errors: true

- name: python35 | Install virtualenv via pip
  pip:
    name: virtualenv
    executable: "pip{{ python3_version }}"
  become: true

- name: python35 | Copy the requirements configuration file for python
  copy: src=python/requirements-current-{{ python3_version }}.txt dest={{ ansible_user_dir }}/requirements-current-{{ python3_version }}.txt backup=yes
  become: true

- name: python35 | Install apt dependencies for python 3 requirements
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - python3-dev
    - libcups2-dev
    - python3-apt
  become: true

- name: python35 | Uninstall dependencies for python 3 requirements
  pip:
    name: "{{ item }}"
    executable: "pip{{ python3_version }}"
    state: absent
  when: not ansible_check_mode
  with_items:
    - libxml2-python
  ignore_errors: '{{ ansible_check_mode }}'
  become: true

- name: python35 | Install C++ librairies database (Debian based) for pyodbc
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - unixodbc-dev    # ODBC
  become: true

- name: python35 | Install C++ librairies for database (CentOS and RedHat based) for pyodbc
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state | default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - unixODBC-devel   # ODBC
  become: true
