
#TODO on RedHat add python3.6 by hand

#TODO RedHat https://www.tecmint.com/install-python-in-linux/ install python 3.6 for ansible
#yum -y groupinstall development
#yum -y install zlib-devel

# wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz
# tar xJf Python-3.6.3.tar.xz
# cd Python-3.6.3
# ./configure
# make
# make install
#rm Python-3.6.3.tgz

# which python3
# python3 -V
# python3.6.3 -V

#virtualenv py3-ansible -p /usr/local/bin/python3.6

- name: jenkins-slave | Install python (RedHat based)
  yum:
    name: "{{ item }}"
    state: "{{ jenkins_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '6')
  with_items:
   - "https://centos6.iuscommunity.org/ius-release.rpm"
   - python36u
   - python36u-pip
  become: yes

- name: jenkins-slave | Install python (RedHat based)
  yum:
    name: "{{ item }}"
    state: "{{ jenkins_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
  with_items:
   - "https://centos7.iuscommunity.org/ius-release.rpm"
   - python36u
   - python36u-pip
  become: yes

- name: python3 | Set python link to python version
  set_fact: python3_version=3.6

- name: python3 | Install python 3 requirement
  action: "{{ ansible_pkg_mgr}} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  with_items:
    - python3-dev
    - python3.6-dev
    - python3-pip
    - python3.6
    - python3.6-dbg
    - python3.6-gdbm
#    - idle-python3.6

- name: python3 | Install missing pip3.6
  shell: "curl https://bootstrap.pypa.io/get-pip.py | sudo python3.6"
  register: curl_result
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  changed_when: false
  become: yes

#python3.6 -m pip install --user pipenv

#- debug: msg="{{ curl_result.stdout }}"

- name: python3 | Run pip check
  shell: (pip - && pip3.6 -V) | uniq
  when: curl_result.changed
  become: yes
  ignore_errors: true

#- name: python3 | Install devops tools requirements
#  pip: name:{{ item }}
#       executable:pip{{ python3_version }}
#  with_items:
#    - "pywinrm>=0.2.2"
#  become: yes

- name: python3 | Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip{{ python3_version }}

- name: python3 | Gather current pip requirement
  shell: "pip{{ python3_version }} freeze > requirements-{{ python3_version }}.txt"
  when: not( (python3_version is undefined) or (python3_version is none) or (python3_version | trim == '') )
  changed_when: false
  become: yes
  ignore_errors: true

- name: python3 | Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip{{ python3_version }}

- name: python3 | Copy the minimal requirements configuration file for python
  copy: src=requirements-{{ python3_version }}.txt dest={{ ansible_user_dir }}/requirements-minimal-{{ python3_version }}.txt backup=yes
  become: true

- name: python3 | Copy the requirements configuration file for python
  copy: src=requirements-{{ python3_version }}.txt dest={{ ansible_user_dir }}/requirements-{{ python3_version }}.txt backup=yes
  become: true

- name: python3 | Install apt dependencies for python 3 requirements
  action: "{{ ansible_pkg_mgr}} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libcups2-dev
    - python3-apt

- name: python3 | Install apt dependencies for python 3 lxml requirements
  action: "{{ ansible_pkg_mgr}} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libxml2-dev
    - libxslt-dev
    - python-dev
    - python3-lxml

- name: python3 | Uninstall apt dependencies for python 3 requirement
  pip:
    name: "{{ item }}"
    executable: "pip{{ python_version }}"
    state: absent
  when: not ansible_check_mode and docker_compose_result.rc != 0
  with_items:
    - libxml2-python
  ignore_errors: '{{ ansible_check_mode }}'
  become: yes

- name: python3 | Create venv and install requirements
  pip:
    requirements: "{{ ansible_user_dir }}/requirements-minimal-{{ python3_version }}.txt"
    virtualenv: /opt/ansible/env36
    virtualenv_python: "python{{ python3_version }}"
  tags:
    - venv
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_user_dir }}/.local/bin"
  ignore_errors: true

#- name: python3 | Install missing pip requirement
#  shell: "pip{{ python3_version }} install -r requirements-current-{{ python3_version }}.txt"
#  changed_when: false
#  become: yes
#  ignore_errors: true
