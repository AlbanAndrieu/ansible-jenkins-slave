#ansible-playbook jenkins.yml --extra-vars "host=myhost user=myuser" -i hosts --ask-sudo-pass

- name: Assert platform is supported
  assert:
    that:
      - ansible_os_family in ['Debian', 'RedHat', 'Windows','Solaris']
      - ansible_architecture in ['x86_64']

- name: Include OS-specific variables.
  include_vars: "{{ ansible_distribution }}-{{ ansible_architecture }}.yml"

- name: jenkins-slave | Update the apt cache (in case of issue)
  action: apt update-cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: jenkins-slave | Create temporary directory
  shell: mktemp -d
  register: tempdir
  changed_when: false
  become: yes
  tags:
    - jenkins-slave

- include: python.yml

#- include: java.yml

#- include: maven.yml

##
 # subversion
 #
#TODO move to its own role
- name: Install subversion package
  action: "{{ ansible_pkg_mgr }} name='subversion' state={{ jenkins_pkg_state|default('present') }} update_cache=yes"
  become: yes

##
 # other
 #
- name: jenkins-slave | Install coverage and metrics tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
   - lcov
   - graphviz
   - doxygen
  become: yes

- name: jenkins-slave | Install tools needed by grunt-zaproxy html report
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }} update_cache=yes"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
#Needed for having /usr/bin/xml2-config in the PATH
   - libxml2-dev
   - libxslt-dev
  become: yes

- name: jenkins-slave | Install tools needed by grunt-zaproxy html report
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }} update_cache=yes"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
   - libxml2 #Needed for having /usr/bin/xml2-config in the PATH
   - libxslt
   - libexslt
  become: yes

#TODO first install pip on RedHat and Ubuntu
#- name: jenkins-slave | Install Ansible syntax check (Debian based)
#  pip: name={{ item }}
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  with_items:
#    - docker-py
#  become: yes

#sudo pip2 install ansible==2.1.1
#sudo pip2 install docker-py==1.9.0
#ansible 2.3.0 issue and docker-py 2.3.0 issue

#for docker-compose version 1.9.0 and docker version 1.12.6
#sudo pip2 install docker-compose==1.9.0
#sudo pip2 install docker-py==1.10.6 
#sudo pip2 install docker==2.0.2
#sudo pip2 install ansible==2.2.0
#sudo pip show docker-py
#- name: jenkins-slave | Install Docker tool (Debian based)
#  pip: name={{ item }}
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  with_items:
#    - docker-py==1.10.6
#  become: yes

#- name: jenkins-slave | Uninstall docker-py
#  pip:
#      name=docker-py
#      state=absent
#  become: yes
  
- name: jenkins-slave | Install Docker tool (Debian based)
  pip: name={{ item }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - ansible==2.3.0.0
  become: yes

- name: jenkins-slave | Install Ansible syntax check
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }} update_cache=yes"
#  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  with_items:
   - ansible-lint
  become: yes
  
- name: jenkins-slave | Install security basic tools for Ansible check
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }}  update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') 
  with_items:
    - chkrootkit
  become: yes

- name: jenkins-slave | Install security basic tools 
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }}  update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - rkhunter
    - unhide
  become: yes

#- include: gcc.yml

- include: perl.yml

##
 # Jenkins user
 #

#- name: Kill connection used by user jenkins
#  action: shell killall -u {{ jenkins_user }} || true
#  changed_when: false
#  become: yes
#  ignore_errors: true

#TODO https://stackoverflow.com/questions/26677064/create-and-use-group-without-restart

- name: jenkins-slave | Create a docker group
  group: 
      name=docker 
      state=present
  become: yes
  
- name: jenkins-slave | Add user(s) to docker group
  user: 
      name={{ item }} 
      group=docker 
      state=present
  with_items: docker_users
  when: docker_users is defined
  become: yes

#sudo gpasswd -a ${USER} docker
#sudo gpasswd -a jenkins docker

- name: jenkins-slave | Create a jenkins group
  group: 
      name=jenkins 
      state=present
  become: yes
  
- name: jenkins-slave | Create jenkins user
  user: name={{ jenkins_user }} password={{ jenkins_password }} update_password=always comment="Jenkins user" home={{ jenkins_home }} shell={{ jenkins_shell }} groups=docker,{{ jenkins_group }}
  become: yes
  ignore_errors: true

- name: jenkins-slave | Create .ssh folder
  file: path={{ jenkins_home }}/.ssh state=directory mode=0700 owner={{ jenkins_user }} group={{ jenkins_group }}
  ignore_errors: true

- include: ssh.yml
  when: jenkins_ssh_key_file != ""
  tags: [jenkins, jenkins-ssh]

- name: jenkins-slave | Update authorized_keys rights
  file: path={{ jenkins_home }}/.ssh/authorized_keys state=file mode=0600 owner={{ jenkins_user }} group={{ jenkins_group }}
  ignore_errors: true

- include: git.yml

- name: jenkins-slave | Copy the deploy-log-parsing-rules for jenkins log parsing configuration
  copy: src=deploy-log-parsing-rules dest={{ jenkins_home }}/deploy-log-parsing-rules backup=yes owner={{ jenkins_user }} group={{ jenkins_group }}

- name: jenkins-slave | Copy the email template for jenkins email ext configuration
  copy: src=groovy-html-main.template dest={{ jenkins_home }}/email-templates/groovy-html-cut.template backup=yes owner={{ jenkins_user }} group={{ jenkins_group }}
  ignore_errors: true

- name: jenkins-slave | Create .m2 folder
  file: path={{ jenkins_home }}/.m2 state=directory owner={{ jenkins_user }} group={{ jenkins_group }} mode=0775
  changed_when: false

- name: jenkins-slave | Copy maven configuration
  template: src=settings.xml.j2 dest={{ jenkins_home }}/.m2/settings.xml backup=yes owner={{ jenkins_user }} group={{ jenkins_group }} mode=0755
  changed_when: false

- name: jenkins-slave | Jenkins can run any command with no password
  lineinfile: dest=/etc/sudoers line="{{item}}" validate='visudo -cf %s'
  with_items:
    - "Defaults:jenkins    !requiretty"
    - "jenkins ALL=NOPASSWD: ALL"
#    - "jenkins ALL=(ALL)   NOPASSWD: /usr/local/bin/test.py"
    - "Defaults:jenkins    secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\""
  become: yes
  changed_when: false

- name: jenkins-slave | Disable env_reset
  lineinfile: dest=/etc/sudoers regexp="^Defaults    env_reset.*"
    line="Defaults    !env_reset"
    backrefs=yes
    validate='visudo -cf %s'
  become: yes
  changed_when: false

- name: jenkins-slave | Set limits
  lineinfile: dest=/etc/security/limits.conf line="{{item.key}}" regexp="{{item.value}}"
  with_dict:
     "*               soft    nofile          65536" : '\*\s+soft\s+nofile'
     "*               hard    nofile          65536" : '\*\s+hard\s+nofile'
     "root            soft    nofile          16384" : 'root\s+soft\s+nofile'
     "root            hard    nofile          65536" : 'root\s+hard\s+nofile'
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  become: yes
  changed_when: false

- name: jenkins-slave | Set limits
  lineinfile: dest=/etc/security/limits.conf line="{{item.key}}" regexp="{{item.value}}"
  with_dict:
     "*               soft    nofile          65536" : '\*\s+soft\s+nofile'
     "*               hard    nofile          65536" : '\*\s+hard\s+nofile'
     "root            soft    nofile          65536" : 'root\s+soft\s+nofile'
     "root            hard    nofile          65536" : 'root\s+hard\s+nofile'
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  become: yes
  changed_when: false

- name: jenkins-slave | Set nproc limits for Jenkins
  lineinfile: dest="/etc/security/limits.d/90-nproc.conf" line='jenkins    soft    nproc     unlimited'
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  become: yes
  changed_when: false

- name: jenkins-slave | Set nproc limits for Jenkins
  lineinfile: dest="/etc/security/limits.d/20-nproc.conf" line='jenkins    soft    nproc     unlimited'
  when: (ansible_distribution == 'RedHat' and ansible_distribution_version == '7.1')
  become: yes
  changed_when: false

- name: jenkins-slave | Set core limits for Jenkins
  lineinfile: dest="/etc/security/limits.conf" line='jenkins    soft    core     unlimited'
  become: yes
  changed_when: false

- name: jenkins-slave | Create {{ jenkins_slave_home }} directory
  file: path={{ jenkins_slave_home }} state=directory
  changed_when: false

- name: jenkins-slave | Create maven repository directory
  file: path={{ maven_repository }} state=directory owner={{ jenkins_user }} group={{ jenkins_group }} mode=0777
  changed_when: false

- name: jenkins-slave | Create Jenkins slave directory
  file: path={{ jenkins_slave_directory }} state=directory owner={{ jenkins_user }} group={{ jenkins_group }} mode=0775
  changed_when: false
  
- name: jenkins-slave | Create Jenkins thin backup directory
  file: path={{ jenkins_remote_thinbackup }} state=directory owner={{ jenkins_user }} group={{ jenkins_group }} mode=0775
  changed_when: false  
  become: yes
  ignore_errors: true

#- name: jenkins-slave | Create Jenkins thin backup directory
#  file: path={{ jenkins_remote_thinbackup }} state=directory owner={{ jenkins_user }} group={{ jenkins_group }} mode=0775
#  changed_when: false  
#  become: yes  
#  ignore_errors: true 

#TODO install C++ sonar build-wrapper
#cd {{ jenkins_home }}
#wget https://sonar:8999/static/cpp/build-wrapper-linux-x86.zip --no-check-certificate
#unzip build-wrapper-linux-x86.zip
#{{ jenkins_home }}/build-wrapper-linux-x86/build-wrapper-linux-x86-64

- name: jenkins-slave | Copy sonar runner configuration
  copy: src=sonar-runner-nabla-cpp.properties dest={{ jenkins_slave_home }}/sonar-runner.properties backup=yes owner={{ jenkins_user }} group={{ jenkins_group }}
  changed_when: false

#- include: nodejs.yml

- name: jenkins-slave | Copy the .npmrc script
  template: src=.npmrc.j2 dest={{ jenkins_home }}/.npmrc mode=0600 owner={{ jenkins_user }} group={{ jenkins_group }}
  changed_when: false

- name: jenkins-slave | Copy the .bowerrc script
  template: src=.bowerrc.j2 dest={{ jenkins_home }}/.bowerrc mode=0600 owner={{ jenkins_user }} group={{ jenkins_group }}
  changed_when: false

- include: tmp.yml

#TODO add JAVA_HOME

- name: jenkins-slave | Add options in ~/.bashrc
#    regexp: "{{ item.regexp }}"
  lineinfile:
    dest: ~/.bashrc
    line: "{{ item.line }}"
    insertafter: EOF
  with_items:
    - { regexp: '', line: 'export SCONS=/usr/bin/scons' }
    - { regexp: '', line: 'export TAR=/bin/gtar' }
  become_user: "{{ jenkins_user }}"
#  become: yes
  changed_when: false

#TODO
#https://docs.ansible.com/ansible/jenkins_plugin_module.html
#- name: Install plugins with a specific version
#  jenkins_plugin:
#    name: "{{ item.key }}"
#    version: "{{ item.value['version'] }}"
#  register: my_jenkins_plugin_versioned
#  when: >
#    'version' in item.value
#  with_dict: my_jenkins_plugins

# Create a jenkins job using basic authentication
#- jenkins_job:
#    config: "{{ lookup('file', 'templates/test.xml') }}"
#    name: test
#    password: admin
#    url: "http://localhost:8080"
#    user: admin

#TODO Add source /etc/profile for RedHat to find lsof command

- name: jenkins-slave | Install requirement for zaproxy
  action: "{{ ansible_pkg_mgr }} name={{ item }} update_cache=yes state={{ jenkins_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
#    - phantomjs
#    - adobe-flashplugin
    - chromium-chromedriver # see selenium role
#    - chromium-browser
##below needed for protractor tests
#    - google-chrome-stable

#TODO sudo ln -s /usr/lib/chromium-browser/chromedriver /var/lib/chromedriver

#TODO use jenkins to install phantomjs
#- name: npm | Ensure the phantomas npm dependencies are installed
#  npm: >
#    name={{ item }}
#    state=present
#    global=yes
#  with_items:
#    - phantomjs
#    - phantomas
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: jenkins-slave | Create Java directory link (legacy required)
  file: path={{ jenkins_slave_home }}/jdk1.7 src={{ jvm_folder }}/{{ jdk7_archive_extracted }} state=link
  when: jenkins_jdk7_enable
  become: yes

#- name: jenkins-slave | Clone the application
#  action: git repo=https://github.com/AlbanAndrieu/nabla.git dest=/jenkins/nabla

- name: jenkins-slave | Cleanup temporary directory
  file: name={{ tempdir.stdout }} state=absent
  tags:
    - jenkins-slave
  changed_when: false    
  ignore_errors: "{{ ansible_check_mode }}"    
  become: yes
  
- name: jenkins-slave | Copy Dockerfile
  template: src=Dockerfile.j2 dest={{ docker_files_generated_directory }}/Dockerfile mode=0777
  when: docker_files_enable

- name: jenkins-slave | Copy build.sh
  template: src=build.sh.j2 dest={{ docker_files_generated_directory }}/build.sh mode=0777
  when: docker_files_enable
