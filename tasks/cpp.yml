---
# i386 and i686 is the 32-bit version, and x86_64 is the 64-bit version of the OS

# OPENSSL
- name: jenkins-slave | Install C++ librairies openssl (Solaris based)
  pkgutil: name={{ item }} state=present
  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
  with_items:
    - CSWlibssl1-0-0

- name: jenkins-slave | Install C++ librairies openssl for building 64bits (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04','14.04']
  with_items:
    - libssl1.0.0
  become: true

- name: jenkins-slave | Install C++ librairies openssl (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - openssl
    - libssl-dev
    - libcrypto++-dev
  become: true

- name: jenkins-slave | Install C++ librairies openssl 0.9.8 (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '5')
  tags: cpp
  with_items:
    - openssl-devel
  become: true

- name: jenkins-slave | Install C++ librairies openssl 1.0.1 (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '5')
  tags: cpp
  with_items:
    - openssl101e-devel
  become: true

- name: jenkins-slave | Install C++ librairies openssl (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - openssl-devel
  become: true

# TODO must be the same as openssl-devel
- name: jenkins-slave | Install C++ librairies openssl for building 64bits (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '6') )
  tags: cpp
  with_items:
    - openssl-libs.x86_64
  become: true

# OPENSSL 0.9.8
- name: jenkins-slave | Install C++ librairies openssl for building 64bits (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04']
  with_items:
    - libssl0.9.8
  become: true

# TODO
# - name: jenkins-slave | Install C++ librairies openssl for building 64bits (Debian based)
# #!/bin/bash
# apt-get update
# apt-get -y install git
# cd /usr/src/
# mkdir openssl
# git clone https://github.com/openssl/openssl.git
# cd openssl
# git checkout OpenSSL_0_9_8-stable
# ./config shared --prefix=/usr/local/openssl/
# make -j2
# make install
# ls -larth /usr/local/openssl/lib/
# #Then add /usr/local/openssl/lib/ to your linker...
# when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['16.04']
# become: true

- name: jenkins-slave | Install C++ librairies openssl for building 64bits (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' and not ansible_distribution_major_version in ('5', '6'))
  tags: cpp
  with_items:
    - openssl098e
    - openssl098e.i686
  become: true

- name: jenkins-slave | Install C++ librairies openssl for building 64bits (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version in ('5', '6'))
  tags: cpp
  with_items:
    - libssl.so.0.9.8
# See https://access.redhat.com/solutions/2043553
# ln -s /usr/lib64/libssl.so.0.9.8e /usr/lib64/libssl.so.0.9.8
# ln -s /usr/lib64/libssl.so.1.0.1e /usr/lib64/libssl.so.1.0.1
# ln -s /usr/lib64/libcrypto.so.0.9.8e /usr/lib64/libcrypto.so.0.9.8
# ln -s /usr/lib64/libcrypto.so.1.0.1e /usr/lib64/libcrypto.so.1.0.1
  become: true

- name: jenkins-slave | Install C++ librairies openssl for building 64bits (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
  tags: cpp
  with_items:
    - openssl098e
  become: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies openssl for building 32bits (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
  tags: cpp
  with_items:
    - openssl098e.i686
  become: true

# OPENLDAP
# FYI : ldpa is used for linux windows,
# but x86sol and sun4sol have been migrated to openldap
- name: jenkins-slave | Install C++ librairies ldap (Solaris based)
  pkgutil: name={{ item }} state=present
  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
  with_items:
    - CSWopenldap                   # Dependencies CSWlibldap-r2-4- CSWlibsasl2-2 CSWliblber2-4-2
# - CSWlibldap2-4-2

- name: jenkins-slave | Install C++ librairies ldap (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
  with_items:
# ldap-2.4 is the default on RedHat 7.1, but we still use ldap-2.3 in the code
    - openldap-devel
# bolow cyrus-sasl-devel is added by openldap-devel
    - cyrus-sasl-devel
  become: true

- name: jenkins-slave | Install C++ librairies ldap (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  tags: cpp
  with_items:
    - openldap-devel
  become: true

# LDAP
# FYI : ldpa is used for linux windows,
# but x86sol and sun4sol have been migrated to openldap
- name: jenkins-slave | Install C++ librairies ldap (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04']
  with_items:
    - libldap-2.4-2
  become: true

- name: jenkins-slave | Install C++ librairies ldap (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  with_items:
    - libldap2-dev
    - libsasl2-dev
  become: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies ldap (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_version == '6.8')
  with_items:
# ldap-2.3 is still needed by tibco adapter
    - compat-openldap
  become: true

- name: jenkins-slave | Install C++ librairies ldap (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
  with_items:
    - compat-openldap
  become: true

# LIBCURL
- name: jenkins-slave | Install C++ librairies curl (Solaris based)
  pkgutil: name={{ item }} state=present
  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
  with_items:
    - CSWlibcurl4        # Dependencies CSWlibz1
#  - CSWlibz1
    - CSWlibreadline6    # Dependencies CSWlibncurses6
#  - CSWlibncurses6

- name: jenkins-slave | Install C++ librairies curl (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['16.04', '18.04']
  # Do not install libcurl3 on Ubuntu 18.04 it is uninstalling curl libcurl4 libcurl4-openssl-dev
  with_items:
    - libcurl3
    - zlib1g
  become: true

- name: jenkins-slave | Install C++ librairies curl (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '14.04']
  with_items:
    - libcurl4-gnutls-dev
    - zlib1g-dev
  become: true

- name: jenkins-slave | Install C++ librairies curl (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - libcurl
    - zlib
  become: true

- name: jenkins-slave | Install C++ librairies curl (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
  tags: cpp
  with_items:
    - libcurl-devel
  become: true

- name: jenkins-slave | Install C++ librairies zip (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not (ansible_distribution_major_version == '5' or ansible_distribution_major_version == '6'))
  tags: cpp
  with_items:
    - libzip-devel
  become: true

# TODO ???
# cross compatibility for i386 i686
# - name: jenkins-slave | Install C++ librairies curl (CentOS and RedHat based)
#   action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#   when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
#   tags: cpp
#   with_items:
#    - libcurl.i686
#   become: true

# LOG4CXX
# - name: jenkins-slave | Install C++ librairies log4cxx (Debian based)
#   action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#   when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04']
#   with_items:
# #do not install log4cxx it because provided by 3rparties for RedHat
# #   - liblog4cxx10
# #   - libcrypto++9
# #   - libxerces-c28
#   become: true
#
- name: jenkins-slave | Install C++ librairies log4cxx (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04', '14.04']
  with_items:
    - liblog4cxx10-dev
#   - libcrypto++9
#   - libxerces-c28
  become: true

- name: jenkins-slave | Install C++ librairies log4cxx (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '14.04']
  tags: cpp
  with_items:
    - liblog4cxx-dev
#   - libcrypto++9
#   - libxerces-c28
  become: true

- name: jenkins-slave | Install C++ librairies log4cxx (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  tags: cpp
  with_items:
    - log4cxx-devel
#   - libcrypto++9
#   - libxerces-c28
  become: true

- name: jenkins-slave | Install C++ librairies log4cxx (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not (ansible_distribution_major_version == '5' or ansible_distribution_major_version == '6'))
  tags: cpp
  with_items:
    - log4cxx-devel
#   - libcrypto++9
#   - libxerces-c28
  become: true

# XERCES (XERCES 2.8 still nedded by OLD LDAP)
- name: jenkins-slave | Install C++ librairies xerces 3.1 (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  tags: cpp
  with_items:
    - libxerces-c-dev
  become: true

- name: jenkins-slave | Install C++ librairies xerces 3.1 (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS')
  tags: cpp
  with_items:
    - xerces-c-devel
  become: true

- name: jenkins-slave | Install C++ librairies xerces 3.1 (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' or ansible_distribution == 'Red Hat Enterprise Linux' and not ansible_distribution_major_version == '5')
  tags: cpp
  with_items:
    - xerces-c-devel
  become: true

# LIBSSH2 nedded by LIBCURL
- name: jenkins-slave | Install C++ librairies libssh2 (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  tags: cpp
  with_items:
    - libssh2-1-dev
  become: true

- name: jenkins-slave | Install C++ librairies libssh2 (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  tags: cpp
  with_items:
    - libssh2-devel
  become: true

- name: jenkins-slave | Install C++ librairies libssh2 (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} enablerepo=rhel-6-server-eus-optional-rpms update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not (ansible_distribution_major_version == '5' and ansible_distribution_major_version == '6'))
  tags: cpp
  with_items:
    - libssh2-devel
  become: true

# TODO ???
# cross compatibility for i386 i686
# - name: jenkins-slave | Install C++ librairies log4cxx (RedHat based)
#   action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#   when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
#   tags: cpp
#   with_items:
#    - log4cxx-devel.i686
#   become: true

# APR nedded by ACTIVEMQ
- name: jenkins-slave | Install C++ librairies apr (Solaris based)
  pkgutil: name={{ item }} state=present
  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
  with_items:
    - CSWlibaprutil1-ldap
#  - CSWlibaprutil1-0 #Dependencies CSWlibapr1-0 CSWlibexpat1 CSWlibiconv2
#  - CSWlibaprutil-dev
#  - CSWlibapr1-0
#  - CSWlibapr-dev
#  - CSWlibexpat0
#  - CSWlibexpat1
#  - CSWlibexpat-dev
#  - CSWlibiconv2

- name: jenkins-slave | Install C++ librairies apr (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  with_items:
    - libapr1-dev
    - libaprutil1-dev
  become: true

- name: jenkins-slave | Install C++ librairies apr (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat')
  with_items:
    - apr-devel
    - apr-util-devel
  become: true

- name: jenkins-slave | Install C++ librairies apr (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  tags: cpp
  with_items:
    - apr-devel
    - apr-util-devel
  become: true

# UUID nedded by ACTIVEMQ
- name: jenkins-slave | Install C++ librairies uuid (Solaris based)
  pkgutil: name={{ item }} state=present
  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
  with_items:
    - CSWlibuuid1
  become: true

- name: jenkins-slave | Install C++ librairies uuid (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
    - uuid-dev
  become: true
  ignore_errors: true

- name: jenkins-slave | Install C++ librairies uuid (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - libuuid-devel
  become: true

# ACTIVEMQ
# - name: jenkins-slave | Install C++ librairies activemq (RedHat based)
#   action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#   when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '5')
#   with_items:
#    - activemq
#   become: true

- name: jenkins-slave | Install C++ librairies activemq (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '5')
  with_items:
    - activemq-cpp-devel
  become: true

- name: jenkins-slave | Install C++ librairies activemq (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  with_items:
    - libdb-dev
    - uuid-dev
    - libcppunit-dev
  become: true

# TODO install from source https://github.com/apache/activemq-cpp/releases/tag/activemq-cpp-3.9.4
# Then lib should be available in /usr/local/lib/libactivemq-cpp.so

# cross compatibility for i386 i686
- name: jenkins-slave | Install package for installing cross compatibility 32bits
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  with_items:
    - bc
  become: true

# LIBSTD
- name: jenkins-slave | Install C++ librairies for building 64bits (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04']
  with_items:
# libstdc++6
    - libstdc++-4.6-dev
# do not install log4cxx it because provided by 3rparties for RedHat
#   - liblog4cxx10
#   - libcrypto++9
  become: true

- name: jenkins-slave | Install C++ librairies for building 64bits (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  with_items:
# libstdc++6
    - libstdc++-4.8-dev
# do not install log4cxx it because provided by 3rparties for RedHat
#   - liblog4cxx10
#   - libcrypto++9
  become: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies for building cross compatibility 32bits (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '14.04']
  with_items:
#   - libstdc++5
# libstdc++6
    - libstdc++-5-dev
    - libstdc++-5-dev:i386
  become: true
  ignore_errors: true

- name: jenkins-slave | Install C++ librairies for building (CentOS based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  tags: cpp
  with_items:
    - libstdc++
# Below libstdc++-devel already installed
#   - libstdc++-devel
    - glibc
#   - log4cxx
#   - libcrypto++9
  become: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies for building 32bits for cross compatibility (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04']
  with_items:
# needed for 32 bits cross compilation
    - g++-4.6-multilib
    - gcc-4.6-multilib
    - ia32-libs
    - lib32stdc++6
    - libc6-i386
    - libc6-dev-i386
  become: true
  ignore_errors: true

- name: jenkins-slave | Install C++ librairies for building 32bits RMDSExtractor (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  with_items:
# needed for 32 bits cross compilation
    - g++-4.8-multilib
    - gcc-4.8-multilib
#   - ia32-libs
# sudo ln -s /usr/lib32/libstdc++.so.6 /usr/lib32/libstdc++.so fixed by lib32gcc-4.8-dev
# sudo ln -s /usr/lib32/libgcc_s.so.1 /usr/lib32/libgcc_s.so    fixed by lib32gcc-4.8-dev
#   - lib32stdc++4.8-dev
    - lib32gcc-4.8-dev
    - libstdc++-4.8-dev
  become: true
  ignore_errors: true

# TODO on Ubuntu 16.04 cros compatibility build for 32bit is not working
# See https://akizuki.moe/?p=416
# without below link workaround

# cross compatibility for i386 i686
# sudo dpkg --add-architecture i386
# TODO export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/lib32:/usr/lib32:/usr/lib/i386-linux-gnu
- name: jenkins-slave | Install C++ librairies for building 32bits for cross compatibility (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '14.04']
  with_items:
# needed for 32 bits cross compilation
#   - g++-multilib
#   - gcc-multilib
    - gcc-5-multilib
    - g++-5-multilib
    - lib32gcc-5-dev
    - libstdc++-5-dev
  become: true
  ignore_errors: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies for building 32bits for cross compatibility (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  with_items:
# needed for 32 bits cross compilation
    - glibc-devel.i686
    - libstdc++-devel.i686
  become: true

# See https://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.how_to_set_paths
- name: jenkins-slave | Install C++ librairies for building old gcc (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '14.04']
  with_items:
# needed for linking old libraries
# ldconfig -v | grep libstdc++
    - libstdc++5
  become: true
  ignore_errors: true

- name: jenkins-slave | Install C++ librairies for building old gcc (RedHat based)
  yum:
    name: "{{ item }}"
    enablerepo: rhel-6-server-optional-rpms
    state: "{{ util_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '6')
  with_items:
# compat-libstdc++-33 contains libstdc++.so.5
    - compat-libstdc++-33
#   - compat-readline5-5.2-17.1.el6.i686
#   - compat-readline5-5.2-17.1.el6.x86_64
  become: true

- name: jenkins-slave | Install C++ librairies for building old gcc (RedHat based)
  yum:
    name: "{{ item }}"
    enablerepo: rhel-7-server-optional-rpms
    state: "{{ util_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
  with_items:
# compat-libstdc++-33 contains libstdc++.so.5
    - compat-libstdc++-33
#   - compat-readline5-5.2-17.1.el6.i686
#   - compat-readline5-5.2-17.1.el6.x86_64
  become: true

- name: jenkins-slave | Install tools (RedHat based)
  yum:
    name: "{{ item }}"
    state: "{{ util_pkg_state|default('present') }}"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
  with_items:
    - nfs-utils
  become: true

- name: jenkins-slave | Install bison
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  tags: package
  with_items:
    - bison
# when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
# when: (ansible_distribution == 'MacOSX' or ansible_distribution == 'FreeBSD')
# when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  become: true
  ignore_errors: true

# ICU UNICODE
# Nedeed for database
- name: jenkins-slave | Install C++ librairies unicode for database (Solaris based)
  pkgutil: name={{ item }} state=present
  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
  with_items:
    - CSWlibicui18n55
    - CSWlibicuuc55

- name: jenkins-slave | Install C++ librairies unicode for database (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libicu-dev
  become: true
  ignore_errors: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies for unicode for database (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '14.04']
  with_items:
# unicode libicuuc.so
    - libicu55
#   - libicu55:i386
# Note that there is 32bits lib/libicuuc.so cross compilation in 3rdparties/x86Linux/adapter
    - libicu-dev:i386
  become: true
  ignore_errors: true

# cross compatibility for i386 i686
- name: jenkins-slave | Install C++ librairies for unicode for database (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'RedHat' and not (ansible_distribution_major_version == '5' or ansible_distribution_major_version == '6'))
  tags: cpp
  with_items:
    - libicu-devel.i686
  become: true

# WARNING it need remi repo
- name: jenkins-slave | Install C++ librairies for unicode for database (RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} enablerepo=remi update_cache=yes"
  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '6')
  tags: cpp
  with_items:
    - libicu-last-devel
  become: true

- name: jenkins-slave | Install C++ librairies for unicode for database (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or (ansible_distribution == 'RedHat' and not ansible_distribution_major_version == '6'))
  tags: cpp
  with_items:
    - libicu-devel
  become: true

# LIBDWARF
- name: jenkins-slave | Install C++ librairies libdwarf (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libdwarf-dev
    - dwarfdump
  become: true
  ignore_errors: true

- name: jenkins-slave | Install C++ librairies for libdwarf (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - libdwarf
  become: true

# XML2
- name: jenkins-slave | Install C++ librairies xml (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libxml2-dev
  become: true

- name: jenkins-slave | Install C++ librairies xml (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - libxml2-devel
  become: true

# GNU LIBTOOL
- name: jenkins-slave | Install C++ librairies gnu libtool (Debian based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - libtool
  become: true

- name: jenkins-slave | Install C++ librairies for gnu libtool (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - libtool-ltdl
  become: true

# before running “NVIDIA-Linux-x86_64-352.41.run
- name: jenkins-slave | Install Kernel header for Nvidia driver (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  tags: cpp
  with_items:
    - kernel-headers
    - binutils
  become: true

- name: jenkins-slave | Install OpenCL (CentOS and RedHat based)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: true
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')
  with_items:
    - numactl
    - redhat-lsb-core
#   - ocl-icd-libopencl1
#   - ocl-icd-opencl-dev
#   - libnuma-dev

# Devtools
# For wget tar unzip, see common role

- name: jenkins-slave | Install cppunit tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - libcppunit-doc
    - libcppunit-dev
  become: true
  ignore_errors: true

- name: jenkins-slave | Install cpp tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  tags: package
  with_items:
    - cppcheck
  become: true
