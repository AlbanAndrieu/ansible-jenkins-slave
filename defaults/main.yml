---

jenkins_name: jenkins
jenkins_user: jenkins
# python -c "from passlib.hash import sha512_crypt; import getpass; print sha512_crypt.encrypt(getpass.getpass())"
#jenkins1234
#http://docs.ansible.com/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module
jenkins_password: "$6$rounds=656000$ITswjqU77/RgGDEv$Vbv6Pw5UJEQQGXwZ4JiR0WXsZVSNAHY7NuWgid.yGLIxro27nZt7CIMwQrh4encLm9Db1RDscEjC1T9ldCgx61"
jenkins_group: jenkins
jenkins_gid: "131"
data_group: "www-data"
data_gid: "33"
docker_users: "{{ jenkins_user }}"
docker_gid: "2000"
docker_group: "docker"
jenkins_groups: "{{ docker_group }},{{ data_group }},{{ jenkins_group }}"
#jenkins_shell: "/bin/false"
jenkins_shell: "/bin/bash"
jenkins_home: /var/lib/jenkins              # Jenkins home location
#NIS issue jenkins_home: /home/jenkins
#jenkins_home: "/home/jenkins"
jenkins_slave_home: "{{ jenkins_home }}"
jenkins_slave_directory: ["{{ jenkins_slave_home }}/slave","{{ jenkins_slave_home }}/slave-test"]
jenkins_sudo: no

jenkins_jdk7_enable: no
jenkins_jdk8_enable: no
#jdk_dir_tmp: "/tmp" # or override with "{{ tempdir.stdout }} in order to have be sure to download the file"
jdk_dir_tmp: "{{ tempdir.stdout }}"
jdk_owner: "root"
jdk_group: "{{ jdk_owner }}"
#For CentOS/RedHat
#jdk_home: "/usr/java/jdk1.8.0_182/"
#jdk_home: "/usr/java/latest/"
#TODO normalize with for Ubuntu /usr/lib/jvm/java-8-oracle/
jdk_home: "/usr/lib/jvm/java-8-oracle/"

jenkins_http_host: 127.0.0.1                # Set HTTP host
jenkins_http_port: 8000                     # Set HTTP port
jenkins_prefix: "/"
jenkins_url: "http://{{ jenkins_http_host }}:{{ jenkins_http_port }}{{jenkins_prefix}}"
jenkins_slave_name: swarm-{{ ansible_hostname }}

# Package states: present or installed or latest
jenkins_pkg_state: present
# Repository states: present or absent
jenkins_repository_state: present

jenkins_ssh_key_file: "~/.ssh/id_rsa"        # Set private ssh key for Jenkins user (path to local file)
jenkins_ssh_authorized_keys_fingerprints: [] # Set known authorized keys for ssh
# Alban Andrieu
#  - "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAio3SOQ9yeK6QfKqSFNKyTasuzjStxWevG1Vz1wgJIxPF+KB0XoMAPD081J+Bzj2LCDRSWisNv2L4xv2jbFxW/Pl7NEakoX47eNx3U+Dxaf+szeWBTryYcDUGkduLV7G8Qncm0luIFd+HDIe/Qir1E2f56Qu2uuBNE6Tz5TFt1vc= Alban"
#ssh-keygen -F $IP
#ssh-keyscan -H $IP
jenkins_ssh_fingerprints:                   # Set known hosts for ssh
  - "bitbucket.org,131.103.20.167 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw=="
  - "github.com,204.232.175.90 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="

jenkins_remote_thinbackup: "/backup/thinBackup"

home_url: "http://localhost"
nexus_url: "{{ home_url }}:8081"
#npm_nexus_npm_url: "{{ nexus_url }}/nexus/content/npm/registry.npmjs.org/"
npm_nexus_npm_url:
npm_nexus_private_npm_url: 
npm_nexus_private_npm_data: []
proxy_cdnurl_server: "localhost"
npm_phantomjs_cdnurl: ""
npm_slimerjs_cdnurl: ""
npm_strict_ssl: "false"
#npm_prefix: "/usr/local"
# Define a list of global packages to be installed with NPM.
npm_global_packages:
  #- phantomjs-prebuilt@2.1.16 #EACCES: permission denied
  - phantomas@1.18.0
  - nsp@2.6.1
  - grunt@1.0.1
  - grunt-cli@1.2.0
  - bower@1.8.4
  - connect@1.9.2
  - node-sass@3.11.2
  - jshint@2.9.5
  - jsonlint@1.6.2
  # - node-gyp@3.6.2 need python / gcc
  - slimerjs@0.10.3
  - casperjs@1.1.4
  #- critical@0.7.3
  - coffee-script@1.10.0
  - analyze-css@0.10.2
  - tap-eater@0.0.3
  - yarn@1.3.2
  - sharp@0.19.0  
  - webdriver-manager@12.1.0  

npm_chromedriver_version: 2.37

#maven_repository: "{{ jenkins_slave_home }}/repository"
maven_repository: "/usr/share/maven-repo"
#TODO sudo chmod 755 -R /usr/share/maven-repo
mvn_home: "/opt/apache-maven-3.2.1/"

bower_directory: "bower_components"
bower_analytics: "false"
bower_timeout: 120000
bower_url: "{{ home_url }}:5678"
bower_registry_url: "{{ bower_url }}"
bower_register_url: "{{ bower_url }}"
bower_publish_url: "{{ bower_url }}"

shell_git_configure_enabled: yes         # Enable git configuration
shell_git: []
  # Additional properties: 'shell_git_machine, shell_git_login, shell_git_email, shell_git_password, shell_git_name, shell_git_path, shell_git_ssl, shell_git_meld_enabled, shell_git_editor'
  # - shell_git_machine: 'localhost',
  #   shell_git_login: 'jenkins',
  #   shell_git_email: 'jenkins@localhost.com',
  #   shell_git_password: 'todo',
  #   # Optional.
  #   shell_git_name: '{{ shell_git_login }}',
  #   shell_git_path: '/usr/bin',
  #   shell_git_ssl: false,
  #   shell_git_meld_enabled: yes,
  #   shell_git_editor: "gedit",

shell_sa_password: "microsoft"
svn_user: "jenkins"
svn_password: "microsoft"

nodejs_version: "7.8.0"
nodejs_enabled: true
epel_repo_enabled: false
python2_version: "2.7"
python3_version: "3.5"

database_docker_oradata: "/opt/oracle/oradata"
#database_docker_oradata_orcl: "${{ database_docker_oradata }}/ora8i/"
database_docker_oradata_orcl: "/u02/app/oracle/oradata/ORCL"
database_docker_scripts: "/opt/oracle/scripts"
database_docker_instantclient: "/opt/oracle/instantclient_12_2"

zabbix_agent_config_server: "127.0.0.1"
zabbix_agent_config_listen_ip: "0.0.0.0"
zabbix_agent_config_start_agents: "3"
zabbix_agent_config_server_active: "{{ zabbix_agent_config_server }}"
#zabbix_agent_config_hostname: "{{ ansible_fqdn }}"
zabbix_agent_config_hostname: "{{ ansible_hostname }}"
zabbix_agent_config_director: "/etc/zabbix/"

proxy_repo_enabled: false
proxy_repo_server: "localhost"
proxy_repo_url: "http://{{ proxy_repo_server }}:3142"

docker_py_version: "1.9.0"

#workspace: "/tmp" # or override with "{{ tempdir.stdout }} in order to have be sure to download the file"
workspace: "{{ tempdir.stdout }}"
sonar_target_dir: "/usr/local/"
sonar_build_wrapper_name: "build-wrapper-linux-x86"
sonar_build_wrapper_download_file: "{{ sonar_build_wrapper_name }}.zip"
#sonar_build_wrapper_download_url: "http://localhost:9000/static/cpp/{{ sonar_build_wrapper_download_file }}"
sonar_build_wrapper_download_url: "https://sonarcloud.io/static/cpp/{{ sonar_build_wrapper_download_file }}"
#sonar_build_wrapper_target_dir: "{{ sonar_target_dir }}sonar-build-wrapper/bin/"
sonar_build_wrapper_target_dir: "{{ sonar_target_dir }}sonar-build-wrapper"

sonar_scanner_name: "sonar-scanner-3.2.0.1227"
sonar_scanner_download_file: "{{ sonar_scanner_name }}.zip"
sonar_scanner_download_url: "https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/{{ sonar_scanner_download_file }}"
sonar_scanner_target_dir: "{{ sonar_target_dir }}sonar-runner"

docker_files_generated_directory: "./"
docker_files_enable: no
docker_volume_directory: "{{ jenkins_home }}"
docker_working_directory: "/tmp/ansible"
#docker_working_directory: "{{ docker_volume_directory }}"
docker_image_name: "nabla/ansible-jenkins-slave"

