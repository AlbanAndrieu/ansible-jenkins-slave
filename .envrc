#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
  if [ -z "$(which ${mandatory_cmd})" ]; then
    echo "===> Mandatory command not found: ${mandatory_cmd}"
    exit 1
  fi
done

#
# Other configuration
# =====================
#

layout_node

# Either use node version specified in package.json
#use node package.json

export NODE_VERSIONS="v20.15.0"
#nvm install v16.14.2

# Or a specific version
#use node ${NODE_VERSIONS}
use_nvm ${NODE_VERSIONS}

#sudo apt install openjdk-11-dbg
#sudo update-java-alternatives -s java-1.11.0-openjdk-amd64

export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
  mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"

#
# Python configuration
# =====================
#

export PYTHON_VERSION=${PYTHON_VERSION:-"3.11.6"}

#
# Python pyenv installation
# ==========================
#
PYENV_PKG_URL="https://pyenv.run"
if [ ! -e "${HOME}/.pyenv/bin/pyenv" ]; then
  echo "===> Getting pyenv (can take a while to execute)"
  curl -s -L "${PYENV_PKG_URL}" | bash
  echo "===> Run : pyenv init"
  echo "===> Run : pyenv local ${PYTHON_VERSION}"
fi

#
# Python 2 requirements
# ==========================
#
if command -v pyenv; then
  for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
    pyenv shell ${VERSION} ;
    pip install py2venv ;
  done
fi

export VENV_TMP_DIR="${PWD}/.venv"
export VENV_BIN_DIR="${VENV_TMP_DIR}/bin"

# check if python version is set in current dir
# .python-version will be created by : pyenv local ${PYTHON_VERSION}
if [ -f ".python-version" ] ; then
  if [ ! -d "${VENV_TMP_DIR}" ] ; then
    echo "Installing virtualenv for $(python -V)"
    # if we didn't install `py2venv` for python 2.x, we would need to use
    # `virtualenv`, which you would have to install separately.
    python -m venv ${VENV_TMP_DIR}
  fi
  echo "Activating $(python -V) virtualenv"
  source ${VENV_BIN_DIR}/activate
  # announce python version and show the path of the current python in ${PATH}
  echo "Virtualenv has been activated for $(python -V)"
  #echo "$(which python)"
fi

if command -v pyenv >/dev/null 2>&1; then
  # layout pyenv ${PYTHON_VERSION}
  layout pyenv
else
  layout_python3
# layout_anaconda
fi

#
# Direnv configuration
# =====================
#

DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${DIRENV_TMP_DIR} -type d -name site-packages)"
# python package are in venv
if [ ! -e "${DIRENV_PYTHON_LIBS_DIR_RELATIVE}" ]; then
  DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${VENV_TMP_DIR} -type d -name site-packages)"
fi
export DIRENV_PYTHON_LIBS_DIR="$(realpath ${DIRENV_PYTHON_LIBS_DIR_RELATIVE})"

#
# Python pip requirements
# ==========================
#
if command -v pyenv >/dev/null 2>&1; then
  for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
    pyenv shell ${VERSION} 2>/dev/null ;
    pip install py2venv ;
  done

  #
  # Python pip upgrade
  # ==========================
  #
  # curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  for VERSION in $(pyenv versions --bare) ; do
    pyenv shell ${VERSION} 2>/dev/null ;
    pip install --upgrade pip ;
  done
fi

# if pyenv and venv
if [ -f ".python-version" ] ; then
  #
  # Python pipenv installation
  # ==========================
  #
  # python -m pip install pipenv==2022.6.7
  PIPENV_VERSION="2022.6.7"
  if [ ! -e "${VENV_BIN_DIR}/pipenv" ]; then
    echo "===> Getting pipenv:${PIPENV_VERSION} (can take a while to execute)"
    python -m pip install pipenv=="${PIPENV_VERSION}"
  fi

  #
  # Python 3 requirements
  # ==========================
  #
  #python -m pip install -r ansible/requirements.txt -r requirements.txt
  python -m pipenv install --dev --ignore-pipfile 2>/dev/null

  #
  # Below install what you do not have already in Pipfile.lock or requirements.txt
  # ==========================

  #
  # Python pre-commit installation
  # ==========================
  #
  # python -m pip install pre-commit==2.19.0
  PRECOMMIT_VERSION=${PRECOMMIT_VERSION:-"2.19.0"}
  if [ ! -e "${VENV_BIN_DIR}/pre-commit" ]; then
    echo "===> Getting pre-commit:${PRECOMMIT_VERSION} (can take a while to execute)"
    python -m pip install pre-commit=="${PRECOMMIT_VERSION}"
  fi

  #pre-commit install 2>/dev/null || true

  #
  # Ansible CLI installation
  # ==========================
  #
  # python -m pip install --user https://github.com/ansible/ansible/archive/stable-2.13.tar.gz
  ANSIBLE_VERSION=${ANSIBLE_VERSION:-"2.13"}
  ANSIBLE_PKG_URL="https://github.com/ansible/ansible/archive/stable-${ANSIBLE_VERSION}.tar.gz"
  if [ ! -e "${VENV_BIN_DIR}/ansible" ]; then
    echo "===> Getting ansible:${ANSIBLE_VERSION} (can take a while to execute)"
    python -m pip install "${ANSIBLE_PKG_URL}"
  fi

	#
	# Ansible configuration
	# =====================
	#
	export ANSIBLE_LIBRARY="${PWD}/plugins/modules:${ANSIBLE_LIBRARY}"
	#export ANSIBLE_SSH_ARGS="-F ${PWD}/ssh.cfg"
	#export ANSIBLE_INVENTORY="hosts"
	export ANSIBLE_COLLECTIONS_PATHS="${DIRENV_TMP_DIR}"

fi

#
# Levant CLI installation
# ==========================
#
# curl -L https://github.com/hashicorp/levant/releases/download/0.2.9/linux-amd64-levant -o levant
LEVANT_VERSION=${LEVANT_VERSION:-"0.2.9"}
LEVANT_ARCH="linux-amd64"
LEVANT_PKG_NAME="${LEVANT_ARCH}-levant"
LEVANT_PKG_URL="https://github.com/hashicorp/levant/releases/download/${LEVANT_VERSION}/${LEVANT_PKG_NAME}"
LEVANT_PKG_PATH="${DIRENV_TMP_DIR}/levant"
if [ ! -e "${DIRENV_BIN_DIR}/levant" ]; then
  echo "===> Getting levant:${LEVANT_VERSION}:${LEVANT_ARCH} (can take a while to execute)"
  curl -s -L "${LEVANT_PKG_URL}" -o "${LEVANT_PKG_PATH}"
  mv ${LEVANT_PKG_PATH} ${DIRENV_BIN_DIR}
  #unzip ${LEVANT_PKG_PATH} -d ${DIRENV_BIN_DIR}
  chmod 700 ${DIRENV_BIN_DIR}/levant
  rm -f ${LEVANT_PKG_PATH}
fi

#
# Terraform CLI installation
# ==========================
#
TF_VERSION=${TF_VERSION:-"1.1.9"}
TF_ARCH="linux_amd64"
TF_PKG_NAME="terraform_${TF_VERSION}_${TF_ARCH}.zip"
TF_PKG_URL="https://releases.hashicorp.com/terraform/${TF_VERSION}/${TF_PKG_NAME}"
TF_PKG_PATH="${DIRENV_TMP_DIR}/${TF_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/terraform" ]; then
  echo "===> Getting terraform:${TF_VERSION}:${TF_ARCH} (can take a while to execute)"
  curl -s -L "${TF_PKG_URL}" -o "${TF_PKG_PATH}"
  unzip ${TF_PKG_PATH} -d ${DIRENV_BIN_DIR}
  chmod 700 ${DIRENV_BIN_DIR}/terraform
  rm -f ${TF_PKG_PATH}
fi

#
# Terraform CLI configuration
# ==========================
#
export TF_PLUGIN_CACHE_DIR="${DIRENV_TMP_DIR}/terraform-plugin-cache"
if [ ! -e "${TF_PLUGIN_CACHE_DIR}" ]; then
  mkdir -p "${TF_PLUGIN_CACHE_DIR}"
fi

#
# Terraform security installation
# ==========================
#
#https://github.com/aquasecurity/tfsec/releases/download/v1.23.3/tfsec-linux-amd64
TF_SEC_VERSION=${TF_SEC_VERSION:-"1.23.3"}
TF_SEC_ARCH="linux-amd64"
TF_SEC_PKG_NAME="tfsec-${TF_SEC_ARCH}"
TF_SEC_PKG_PATH="${DIRENV_TMP_DIR}/${TF_SEC_PKG_NAME}"
TF_SEC_PKG_URL="https://github.com/aquasecurity/tfsec/releases/download/v${TF_SEC_VERSION}/${TF_SEC_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/tfsec" ]; then
  echo "===> Getting tfec:${TF_SEC_VERSION} (can take a while to execute)"
  curl -s -L "${TF_SEC_PKG_URL}" -o "${TF_SEC_PKG_PATH}"
  mv "${TF_SEC_PKG_PATH}" "${DIRENV_BIN_DIR}/tfsec"
  chmod 700 ${DIRENV_BIN_DIR}/tfsec
fi

#
# Terraform linter installation
# ==========================
#
#curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
TFLINT_VERSION=${TFLINT_VERSION:-"v0.37.0"}
TF_LINT_PKG_URL="https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh"
if [ ! -e "${DIRENV_BIN_DIR}/tflint" ]; then
  echo "===> Getting tflint:${TFLINT_VERSION} (can take a while to execute)"
  export TFLINT_INSTALL_PATH="${DIRENV_BIN_DIR}"
  curl -s -L "${TF_LINT_PKG_URL}" | bash
fi

#
# Terraform docs installation
# ==========================
#
#curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
TF_DOCS_VERSION=${TF_DOCS_VERSION:-"0.16.0"}
TF_DOCS_ARCH="linux-amd64"
TF_DOCS_PKG_NAME="terraform-docs-v${TF_DOCS_VERSION}-${TF_DOCS_ARCH}.tar.gz"
TF_DOCS_PKG_PATH="${DIRENV_TMP_DIR}/${TF_DOCS_PKG_NAME}"
TF_DOCS_PKG_URL="https://github.com/terraform-docs/terraform-docs/releases/download/v${TF_DOCS_VERSION}/${TF_DOCS_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/terraform-docs" ]; then
  echo "===> Getting terraform-docs:${TF_DOCS_VERSION} (can take a while to execute)"
  curl -s -L "${TF_DOCS_PKG_URL}" -o "${TF_DOCS_PKG_PATH}"
  tar -xf ${TF_DOCS_PKG_PATH} -C ${DIRENV_BIN_DIR}
  rm -f ${TF_DOCS_PKG_PATH}
fi

#
# GO installation
# ==========================
#
#curl -O https://storage.googleapis.com/golang/go1.13.5.linux-amd64.tar.gz
GO_VERSION="1.18.1"
GO_ARCH="linux-amd64"
GO_PKG_NAME="go${GO_VERSION}.${GO_ARCH}.tar.gz"
GO_PKG_PATH="${DIRENV_TMP_DIR}/${GO_PKG_NAME}"
GO_PKG_URL="https://storage.googleapis.com/golang/${GO_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/go/bin/go" ]; then
  echo "===> Getting go:${GO_VERSION} (can take a while to execute)"
  curl -s -L "${GO_PKG_URL}" -o "${GO_PKG_PATH}"
  tar -xf ${GO_PKG_PATH} -C ${DIRENV_BIN_DIR}
  rm -f ${GO_PKG_PATH}
fi

PATH_add ${DIRENV_BIN_DIR}/go/bin/

#
# GO sec installation
# ==========================
#
#curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.11.0
GO_SEC_VERSION="2.11.0"
GO_SEC_PKG_URL="https://raw.githubusercontent.com/securego/gosec/master/install.sh"
if [ ! -e "${HOME}/go/bin/gosec" ]; then
  echo "===> Getting go sec:${GO_SEC_VERSION} (can take a while to execute)"
  curl -sfL "${GO_SEC_PKG_URL}" | sh -s -- -b $(go env GOPATH)/bin v${GO_SEC_VERSION}
fi

#
# Environment configuration
# =========================
#
#
ENV_ADDONS=".env.local .env.secrets"
for addon in ${ENV_ADDONS}; do
  if [ -e "${PWD}/${addon}" ]; then
    source ${PWD}/${addon}
  fi
done

# See https://github.com/direnv/direnv/wiki/PS1
unset PS1
